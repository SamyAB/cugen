from unittest.mock import patch, call

import cupy

from cugen.sat_problem_modelling.dimacs_reader import transform_dimacs_clause_to_cugen_clause, read_dimacs_file

TESTED_MODULE = 'cugen.sat_problem_modelling.dimacs_reader'


def test_transform_dimacs_clause_to_cugen_clause_transforms_correctly_dimacs_clause_to_nan_0_and_1_array():
    # Given
    dimacs_clause = "4 -8 9 0\n"
    number_of_literals = 10

    expected_cugen_clause = cupy.array([cupy.nan, cupy.nan, cupy.nan, 1, cupy.nan,
                                        cupy.nan, cupy.nan, 0, 1, cupy.nan])

    # When
    cugen_clause = transform_dimacs_clause_to_cugen_clause(dimacs_clause, number_of_literals)

    # Then
    cupy.testing.assert_array_equal(cugen_clause, expected_cugen_clause)


@patch(f'{TESTED_MODULE}.transform_dimacs_clause_to_cugen_clause', return_value=cupy.array([1, 2, 3]))
def test_read_dimacs_file_finds_the_right_number_of_literals_and_loops_over_clauses_to_transform_them(
        mock_transform_clause, tmp_path
):
    # Given
    dimacs_content = "c This Formular is generated by mcnf\n" + \
                     "c\n" + \
                     "c    horn? no\n" + \
                     "c    forced? no\n" + \
                     "c    mixed sat? no\n" + \
                     "c    clause length = 3\n" + \
                     "c\n" + \
                     "p cnf 3 4\n" + \
                     " 1 2 3 0\n" + \
                     "-1 -2 -3 0\n" + \
                     "1 2 -3 0\n" + \
                     "-1 2 -3 0\n" + \
                     "%\n" + \
                     "0\n"
    dimacs_file_path = tmp_path / "cnf_formula.cnf"
    dimacs_file_path.write_text(dimacs_content)

    expected_transform_clause_calls = [
        call(" 1 2 3 0\n", 3),
        call("-1 -2 -3 0\n", 3),
        call("1 2 -3 0\n", 3),
        call("-1 2 -3 0\n", 3),
    ]

    # When
    _ = read_dimacs_file(dimacs_file_path)

    # Then
    mock_transform_clause.assert_has_calls(expected_transform_clause_calls)
